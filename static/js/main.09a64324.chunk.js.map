{"version":3,"sources":["components/Header/index.tsx","components/CountryInfo/index.tsx","components/CountriesTable/index.tsx","utils.ts","components/LineGraph/index.tsx","containers/Dashboard/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Header","props","useState","country","setCountry","Box","display","justifyContent","mb","Typography","variant","FormControl","Select","labelId","id","value","onChange","event","target","onCountryChange","MenuItem","undefined","countries","map","index","key","countryInfo","iso2","CountryInfo","Card","CardContent","title","todayData","totalData","StyledTableCell","withStyles","theme","createStyles","root","padding","spacing","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","action","hover","TableRow","useStyles","makeStyles","table","minWidth","tableContainerRoot","height","CountriesTable","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","align","TableBody","scope","cases","sortData","data","sortedData","sort","a","b","options","legend","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","LineGraph","chartData","setChartData","getChartData","dataType","lastDataPoint","dataPoint","newDataPoint","x","y","push","useEffect","fetch","then","res","json","convertedData","getData","my","datasets","borderColor","Dashboard","setCountryInfo","setCountries","response","countryData","getCountries","countryCode","url","p","flex","todayCases","todayRecovered","recovered","todayDeaths","deaths","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.09a64324.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Box from '@material-ui/core/Box'\r\nimport { FormControl, Select, MenuItem, Typography } from '@material-ui/core';\r\nfunction Header(props:any) {\r\n    const [country,setCountry] = useState('worldwide');\r\n    const onCountryChange = (event:any)=>{\r\n        let country = event.target.value;\r\n        setCountry(country)\r\n        props.onCountryChange(country)\r\n    }\r\n    return (\r\n        <Box display='flex' justifyContent='space-between' mb={2}>\r\n            <Box>\r\n                <Typography variant='h4'>COVID Tracker</Typography>\r\n            </Box>\r\n            <Box>\r\n                <FormControl>\r\n                    <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={country}\r\n                    onChange={onCountryChange}\r\n                    >\r\n                        <MenuItem value='worldwide'>Worldwide</MenuItem>\r\n                        {\r\n                            props.countries!==undefined && props.countries.map((country:any,index:number)=>(\r\n                            <MenuItem key={index} value={country.countryInfo.iso2}>{country.country}</MenuItem>\r\n                            ))\r\n                        }    \r\n                    </Select>\r\n                </FormControl>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Typography, Card, CardContent } from '@material-ui/core'\r\ninterface CountryInfoProps{\r\n    title:string,\r\n    todayData:number,\r\n    totalData:number\r\n}\r\nfunction CountryInfo(props:CountryInfoProps) {\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Typography variant='h6'>{props.title}</Typography>\r\n                <Typography variant='h6'>+{props.todayData}</Typography>\r\n                <Typography variant='body1'>{props.totalData}</Typography>     \r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CountryInfo\r\n","import React from 'react';\r\nimport { withStyles, Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nconst StyledTableCell = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root:{\r\n        padding:theme.spacing(1)\r\n    },\r\n    head: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n      fontSize: 14,\r\n    },\r\n  }),\r\n)(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n    },\r\n  }),\r\n)(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 250\r\n    },\r\n    tableContainerRoot:{\r\n        height:300\r\n    }\r\n  });\r\nfunction CountriesTable(props:any) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Typography variant='h6'>Live Cases by Country</Typography>\r\n                <TableContainer component={Paper} classes={{root:classes.tableContainerRoot}}>\r\n                    <Table className={classes.table} aria-label=\"customized table\">\r\n                        <TableHead>\r\n                        <TableRow>\r\n                            <StyledTableCell>Country</StyledTableCell>\r\n                            <StyledTableCell align=\"right\">Cases</StyledTableCell>\r\n                        </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                        {props.countries.map((country:any,index:number) => (\r\n                            <StyledTableRow key={country.country}>\r\n                            <StyledTableCell component=\"th\" scope=\"row\">\r\n                                {country.country}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell align=\"right\">{country.cases}</StyledTableCell>\r\n                            </StyledTableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CountriesTable\r\n","export const sortData = (data:any)=>{\r\n    const sortedData =  [...data];\r\n    sortedData.sort((a:any,b:any)=>(a.cases>b.cases?-1:1))\r\n    return sortedData;\r\n}","import React, { useState, useEffect } from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from \"numeral\";\r\nimport { Box } from '@material-ui/core';\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: true,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem:any, data:any) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            callback: function (value:any, index:any, values:any) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\nfunction LineGraph(props:any) {\r\n    const [chartData,setChartData]:any = useState();\r\n    const dataType = props.dataType?props.dataType:'cases';\r\n    const getChartData = (data:any,dataType='cases')=>{\r\n        let lastDataPoint;\r\n        const chartData = [];\r\n        for(let dataPoint in data[dataType]){\r\n            if(lastDataPoint){\r\n                let newDataPoint = {\r\n                    x:dataPoint,\r\n                    y:data[dataType][dataPoint]-lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[dataType][dataPoint];\r\n        }\r\n        return chartData\r\n    }\r\n    useEffect(() => {\r\n        const getData = async ()=>{\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120').then(res=>res.json())\r\n            .then(data=>{\r\n                let convertedData = getChartData(data);\r\n                setChartData(convertedData)\r\n            })\r\n        }\r\n        getData();\r\n    }, [])\r\n    return (\r\n        <Box my={2}>\r\n            {chartData && <Line \r\n            data={{\r\n                datasets:[\r\n                    {\r\n                        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                        borderColor: \"#DD1034\",\r\n                        data:chartData\r\n                    }\r\n                ]\r\n            }}\r\n            options={options} \r\n            />}\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default LineGraph","import React, { useState, useEffect } from 'react'\r\nimport Header from '../../components/Header'\r\nimport { Box } from '@material-ui/core'\r\nimport CountryInfo from '../../components/CountryInfo'\r\nimport CountriesTable from '../../components/CountriesTable'\r\nimport {sortData} from '../../utils'\r\nimport LineGraph from '../../components/LineGraph'\r\nfunction Dashboard() {\r\n    const [countryInfo,setCountryInfo]:any = useState();\r\n    const [countries,setCountries] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        const getCountries = async ()=>{\r\n            fetch('https://disease.sh/v3/covid-19/countries')\r\n            .then(response=>response.json())\r\n            .then(data=>{\r\n                const countries = data.map((countryData:any)=>{\r\n                    return countryData\r\n                })\r\n                const sortedData:any = sortData(countries)\r\n                setCountries(sortedData)\r\n            })\r\n        }\r\n        getCountries()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        fetch('https://disease.sh/v3/covid-19/all')\r\n        .then(response=>response.json())\r\n        .then(data=>{\r\n            setCountryInfo(data)\r\n        })\r\n    }, [])\r\n\r\n    const onCountryChange = async (countryCode:any)=>{\r\n        const url = countryCode==='worldwide'? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n        await fetch(url).then(response=>response.json())\r\n        .then(data=>{\r\n            setCountryInfo(data)\r\n        })\r\n    }\r\n    return (\r\n        <Box p={1.5} display='flex' className='app' justifyContent='space-between'>\r\n            <Box flex={.8}>\r\n            <Header onCountryChange={onCountryChange} countries={countries}/>\r\n            {\r\n                countryInfo &&\r\n                <Box display='flex' justifyContent='space-between'>\r\n                    <CountryInfo title='Coronavirus Cases' todayData={countryInfo.todayCases} totalData={countryInfo.cases}/>\r\n                    <CountryInfo title='Recovered' todayData={countryInfo.todayRecovered} totalData={countryInfo.recovered}/>\r\n                    <CountryInfo title='Deaths' todayData={countryInfo.todayDeaths} totalData={countryInfo.deaths}/>\r\n                </Box>\r\n            }\r\n            </Box>\r\n            <Box>\r\n            <CountriesTable countries={countries}/>\r\n            <LineGraph/>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","import React from 'react';\nimport Dashboard from './containers/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}